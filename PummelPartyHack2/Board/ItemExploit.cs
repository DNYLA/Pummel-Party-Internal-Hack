using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
using ZP.Net;

namespace PummelPartyHack.Board
{
    public class ItemExploit : MonoBehaviour
    {
        List<BoardPlayer> players = new List<BoardPlayer>();
        BoardPlayer me = new BoardPlayer();


        private int StringToInt(string str)
        {
            int parsedInt;

            try
            {
                parsedInt = Int32.Parse(str);
            }
            catch
            {
                parsedInt = -1;
            }

            return parsedInt;
        }

        public void GiveItem(string id)
        {
            int itemID = StringToInt(id);       

            if (itemID >= 0 && itemID <= 15) me.GiveItem((byte)itemID, false);
            else Debug.Log("Please Enter a Valid ItemID");

        }

        public void GiveKey(string keyAmm)
        {
            int amm = StringToInt(keyAmm);

            if (amm > 0) me.GiveGold(amm, false);
            else Debug.Log("Enter a Valid Number Above Zero");
        }

        public void GiveHealth(string healthAmm)
        {
            int hAmm = StringToInt(healthAmm);

            if (hAmm > 0) me.ApplyHeal(hAmm);
            else Debug.Log("Enter a Valid Number Above Zero");
        }

        public void TeleportOnMap(string strNode)
        {
            int node = StringToInt(strNode);

            

            try
            {
                BoardNode[] bNodes = GameManager.Board.BoardNodes;
                GameManager.Board.MovePlayer(me.GamePlayer.GlobalID, bNodes[node].NodeID, true);
                //me.MoveTeleport(5);
            }
            catch
            {
                Debug.Log("Node/Position Does Not Exist");
            }

        }

        public void MoveForward(string moveAmm)
        {
            int amm = StringToInt(moveAmm);

            me.Move(amm);
            
        }

        public void ItemExploiter()
        {
            GetPlayers();

            if (players.Count <= 0)
                return;
                
            //me.TurnOrderRoll = 0;



            //me.EquipCactus();

            //GigaLaserItem sg = new GigaLaserItem();
            //sg.skipTurnAfterUse = false;
            //me.GiveItem(13, true);
            //me.ApplyHeal(5);
            //me.SetEquippedItem(sg);
        }

        public void GetPlayers()
        {
            players.Clear();
            players.AddRange(FindObjectsOfType<BoardPlayer>());

            foreach (BoardPlayer ply in players)
            {

                if (ply.GamePlayer.IsLocalPlayer && !ply.GamePlayer.IsAI)
                {
                    me = ply;
                    //break;
                }
            }
        }
    }
}
